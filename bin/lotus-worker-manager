#!/usr/bin/bash

dir="${BASH_SOURCE%/*}"
if [[ ! -d "$dir" ]]; then dir="$PWD"; fi
. "$dir/check-dependencies"

check_dependencies dialog

readonly DIALOG_OK=0
readonly DIALOG_YES=0
readonly DIALOG_NEXT=0
readonly DIALOG_DONE=0
readonly DIALOG_FINISH=0
readonly DIALOG_CANCEL=1
readonly DIALOG_QUIT=1
readonly DIALOG_HELP=2
readonly DIALOG_BACK=3
readonly DIALOG_EXTRA=3
readonly DIALOG_ADVANCED=3
readonly DIALOG_ITEM_HELP=4
readonly DIALOG_ESC=255

readonly HEIGHT=0
readonly WIDTH=0

for i in \
    E_CREATE_GENERALPARAMS E_CREATE_TYPE E_CREATE_TASKS E_CREATE_SUMMARY E_CREATE_ADVANCED E_CREATE_QUIT \
    E_CREATE_ADVANCED_PARAMETERS E_CREATE_ADVANCED_FLAGS E_CREATE_ADVANCED_QUIT \
    E_CREATE_ADVANCED_FINETUNING_AP E_CREATE_ADVANCED_FINETUNING_PC1 E_CREATE_ADVANCED_FINETUNING_PC2 \
    E_CREATE_ADVANCED_FINETUNING_C1 E_CREATE_ADVANCED_FINETUNING_C2 E_CREATE_ADVANCED_FINETUNING_UNS E_CREATE_ADVANCED_FINETUNING_GET; do \
    readonly ${i}=$((x++)); done

declare g_name
declare g_port
declare g_type='Seal'
declare g_gpus
declare g_cpuUtilization='0.01'
declare g_tasks
declare g_flags='SDR'
declare g_exports
declare g_cpuGroup='all'
declare g_generalParams
declare g_advancedParams
declare g_bellmanCustomGpu

# Finetuning 32G sectors
declare g_advancedFinetuningAddPiece
declare g_advancedFinetuningPreCommit1
declare g_advancedFinetuningPreCommit2
declare g_advancedFineTuningCommit1
declare g_advancedFinetuningCommit2
declare g_advancedFinetuningUnseal
declare g_advancedFinetuningGet

# AddPiece 32G sectors
declare g_apBaseMinimumMemory
declare g_apGpuUtilization
declare g_apMaxMemory
declare g_apMaxParallelism
declare g_apMaxParallelismGpu
declare g_apMinimumMemory

# PreCommit1 32G sectors
declare g_pc1BaseMinimumMemory
declare g_pc1GpuUtilization
declare g_pc1MaxMemory
declare g_pc1MaxParallelism
declare g_pc1MaxParallelismGpu
declare g_pc1MinimumMemory

# PreCommit2 32G sectors
declare g_pc2BaseMinimumMemory
declare g_pc2GpuUtilization
declare g_pc2MaxMemory
declare g_pc2MaxParallelism
declare g_pc2MaxParallelismGpu
declare g_pc2MinimumMemory

# Commit1 32G sectors
declare g_c1BaseMinimumMemory
declare g_c1GpuUtilization
declare g_c1MaxMemory
declare g_c1MaxParallelism
declare g_c1MaxParallelismGpu
declare g_c1MinimumMemory

# Commit2 32G sectors
declare g_c2BaseMinimumMemory
declare g_c2GpuUtilization
declare g_c2MaxMemory
declare g_c2MaxParallelism
declare g_c2MaxParallelismGpu
declare g_c2MinimumMemory

# Unseal 32G sectors
declare g_unsBaseMinimumMemory
declare g_unsGpuUtilization
declare g_unsMaxMemory
declare g_unsMaxParallelism
declare g_unsMaxParallelismGpu
declare g_unsMinimumMemory

# Get 32G sectors
declare g_getBaseMinimumMemory
declare g_getGpuUtilization
declare g_getMaxMemory
declare g_getMaxParallelism
declare g_getMaxParallelismGpu
declare g_getMinimumMemory

function is_task_enabled
{
    local task=${@:1}
    [[ "$g_tasks" =~ (^|[[:space:]])"$task"($|[[:space:]]) ]] \
    && true || false
}

function is_type_enabled
{
    local type=${@:1}
    [[ "$g_type" == "$type" ]] \
    && true || false
}

function is_flag_enabled
{
    local flag=${@:1}
    [[ "$g_flags" =~ (^|[[:space:]])"$flag"($|[[:space:]]) ]] \
    && true || false
}

function is_task_of
{
    local task=${@:1}
    if $(is_task_enabled $task); then
        echo 'on'
    else
        echo 'off'
    fi
}

function is_task_tf
{
    local task=${@:1}
    if $(is_task_enabled $task); then
        echo 'true'
    else
        echo 'false'
    fi
}

function is_type_of
{
    local type=${@:1}
    if $(is_type_enabled $type); then
        echo 'on'
    else
        echo 'off'
    fi
}

function is_type_tf
{
    local type=${@:1}
    if $(is_type_enabled $type); then
        echo 'true'
    else
        echo 'false'
    fi
}

function is_flag_of
{
    local flag=${@:1}
    if $(is_flag_enabled $flag); then
        echo 'on'
    else
        echo 'off'
    fi
}

function is_flag_io
{
    local flag=${@:1}
    if $(is_flag_enabled $flag); then
        echo '1'
    else
        echo '0'
    fi
}

function worker_generalparams_dialog
{
    g_generalParams=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --form 'General Parameters' $HEIGHT $WIDTH 10 \
        'Name' 1 1 "$g_name" 1 20 20 0 \
        'Port' 2 1 "$g_port" 2 20 20 0 \
        'GPUs' 3 1 "$g_gpus" 3 20 20 0 \
        'CPU Group' 4 1 "$g_cpuGroup" 4 20 20 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_type_dialog
{
    g_type=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
	    --extra-button \
	    --extra-label 'Back' \
	    --no-tags \
	    --no-cancel \
        --radiolist 'Select Type' $HEIGHT $WIDTH 3 \
        Seal 'Sealer' $(is_type_of Seal) \
        WdPoSt 'WindowPoSt' $(is_type_of WdPoSt) \
        WinPoSt 'WinningPoSt' $(is_type_of WinPoSt) \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_parameters_dialog
{
    g_advancedParams=$(dialog \
	    --title 'Create Worker' \
	    --backtitle 'Lotus Worker Manager' \
	    --ok-label 'Next' \
	    --no-cancel \
	    --form 'Advanced Parameters' $HEIGHT $WIDTH 10 \
        'CPU Utilization' 1 1 "$g_cpuUtilization" 1 20 40 0 \
        'Bellman Custom GPU' 2 1 "$g_bellmanCustomGpu" 2 20 40 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_ap_32g_dialog
{
    g_advancedFinetuningAddPiece=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'AddPiece Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_apBaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_apGpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_apMaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_apMaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_apMaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_apMinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_pc1_32g_dialog
{
    g_advancedFinetuningPreCommit1=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'PreCommit1 Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'      1 1 "$g_pc1BaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'          2 1 "$g_pc1GpuUtilization" 2 30 15 0 \
        'Maximum Memory'           3 1 "$g_pc1MaxMemory" 3 30 15 0 \
        'Maximum Parallelism'      4 1 "$g_pc1MaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU'  5 1 "$g_pc1MaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'           6 1 "$g_pc1MinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_pc2_32g_dialog
{
    g_advancedFinetuningPreCommit2=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'PreCommit2 Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_pc2BaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_pc2GpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_pc2MaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_pc2MaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_pc2MaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_pc2MinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_c1_32g_dialog
{
    g_advancedFinetuningCommit1=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'Commit1 Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_c1BaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_c1GpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_c1MaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_c1MaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_c1MaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_c1MinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_c2_32g_dialog
{
    g_advancedFinetuningCommit2=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'Commit2 Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_c2BaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_c2GpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_c2MaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_c2MaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_c2MaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_c2MinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_uns_32g_dialog
{
    g_advancedFinetuningUnseal=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'Unseal Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_unsBaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_unsGpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_unsMaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_unsMaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_unsMaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_unsMinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_finetuning_get_32g_dialog
{
    g_advancedFinetuningGet=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --extra-button \
        --extra-label 'Back' \
        --form 'Get Fine Tuning' $HEIGHT $WIDTH 10 \
        'Base Minimum Memory'     1 1 "$g_getBaseMinimumMemory" 1 30 15 0 \
        'GPU Utilization'         2 1 "$g_getGpuUtilization" 2 30 15 0 \
        'Maximum Memory'          3 1 "$g_getMaxMemory" 3 30 15 0 \
        'Maximum Parallelism'     4 1 "$g_getMaxParallelism" 4 30 15 0 \
        'Maximum Parallelism GPU' 5 1 "$g_getMaxParallelismGpu" 5 30 15 0 \
        'Minimum Memory'          6 1 "$g_getMinimumMemory" 6 30 15 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_advanced_flags_dialog
{
    g_flags=$(dialog \
		--title 'Create Worker' \
		--backtitle 'Lotus Worker Manager' \
		--extra-button \
		--extra-label 'Back' \
		--no-cancel \
		--no-tags \
		--checklist 'Advanced Flags' $HEIGHT $WIDTH 10 \
        SDR 'Use Multicore SDR' $(is_flag_of SDR) \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_tasks_dialog
{
    g_tasks=$(dialog \
        --title 'Creater Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --extra-button \
        --extra-label 'Back' \
        --no-cancel \
        --no-tags \
        --checklist 'Select Tasks' $HEIGHT $WIDTH 10 \
        AP  'AddPiece'               $(is_task_of AP) \
        PC1 'PreCommit1'             $(is_task_of PC1) \
        PC2 'PreCommit2'             $(is_task_of PC2) \
        C2  'Commit'                 $(is_task_of C2) \
        UNS 'Unseal'                 $(is_task_of UNS) \
        RU  'Replica Update'         $(is_task_of RU) \
        PR2 'Prove Replica Update 2' $(is_task_of PR2) \
        GSK 'Regen Sector Key'       $(is_task_of GSK) \
        3>&1 1>&2 2>&3 3>&-)
}

function worker_summary_dialog
{
    declare summary
    summary+="Worker will be created:\n\n"
    summary+="Name:   $g_name\n"
    summary+="Port:   $g_port\n"
    
    if [[ "$g_type" == "Seal" ]]; then
	    summary+="Tasks:  $g_tasks\n\n"
    else
        summary+="Tasks:  $g_type\n\n"
    fi

    summary+="Proceed?"

    dialog --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Finish' \
        --extra-button \
        --extra-label 'Back' \
        --cancel-label 'Advanced' \
        --yesno "${summary}" $HEIGHT $WIDTH \
        3>&1 1>&2 2>&3 3>&-
}

function create_worker_generalparams
{
    local state=$E_CREATE_QUIT
    worker_generalparams_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_CREATE_TYPE 
            ;;
    esac

    worker_generalparams_postprocessing
    return $state
}

function worker_generalparams_postprocessing
{
    if [ -n "$g_generalParams" ]; then
        readarray -t strarr <<< "$g_generalParams"
        g_name=${strarr[0]}
        g_port=${strarr[1]}
        g_gpus=${strarr[2]}
        g_cpuGroup=${strarr[3]}
    fi
}

function worker_advanced_finetuning_ap_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningAddPiece" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningAddPiece"
        g_apBaseMinimumMemory=${strarr[0]}
        g_apGpuUtilization=${strarr[1]}
        g_apMaxMemory=${strarr[2]}
        g_apMaxParallelism=${strarr[3]}
        g_apMaxParallelismGpu=${strarr[4]}
        g_apMinimumMemory=${strarr[5]}
    fi    
}

function worker_advanced_finetuning_pc1_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningPreCommit1" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningPreCommit1"
        g_pc1BaseMinimumMemory=${strarr[0]}
        g_pc1GpuUtilization=${strarr[1]}
        g_pc1MaxMemory=${strarr[2]}
        g_pc1MaxParallelism=${strarr[3]}
        g_pc1MaxParallelismGpu=${strarr[4]}
        g_pc1MinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_pc2_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningPreCommit2" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningPreCommit2"
        g_pc2BaseMinimumMemory=${strarr[0]}
        g_pc2GpuUtilization=${strarr[1]}
        g_pc2MaxMemory=${strarr[2]}
        g_pc2MaxParallelism=${strarr[3]}
        g_pc2MaxParallelismGpu=${strarr[4]}
        g_pc2MinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_c1_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningCommit1" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningCommit1"
        g_c1BaseMinimumMemory=${strarr[0]}
        g_c1GpuUtilization=${strarr[1]}
        g_c1MaxMemory=${strarr[2]}
        g_c1MaxParallelism=${strarr[3]}
        g_c1MaxParallelismGpu=${strarr[4]}
        g_c1MinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_c2_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningCommit2" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningCommit2"
        g_c2BaseMinimumMemory=${strarr[0]}
        g_c2GpuUtilization=${strarr[1]}
        g_c2MaxMemory=${strarr[2]}
        g_c2MaxParallelism=${strarr[3]}
        g_c2MaxParallelismGpu=${strarr[4]}
        g_c2MinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_uns_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningUnseal" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningUnseal"
        g_unsBaseMinimumMemory=${strarr[0]}
        g_unsGpuUtilization=${strarr[1]}
        g_unsMaxMemory=${strarr[2]}
        g_unsMaxParallelism=${strarr[3]}
        g_unsMaxParallelismGpu=${strarr[4]}
        g_unsMinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_get_32g_postprocessing
{
    if [ -n "$g_advancedFinetuningGet" ]; then
        readarray -t strarr <<< "$g_advancedFinetuningGet"
        g_getBaseMinimumMemory=${strarr[0]}
        g_getGpuUtilization=${strarr[1]}
        g_getMaxMemory=${strarr[2]}
        g_getMaxParallelism=${strarr[3]}
        g_getMaxParallelismGpu=${strarr[4]}
        g_getMinimumMemory=${strarr[5]}
    fi
}

function worker_advanced_finetuning_ap_32g_defaults
{
    g_apBaseMinimumMemory=1073741824
    g_apGpuUtilization=0
    g_apMaxMemory=4294967296
    g_apMaxParallelism=1
    g_apMaxParallelismGpu=0
    g_apMinimumMemory=4294967296
}

function worker_advanced_finetuning_pc1_32g_defaults
{
    g_pc1BaseMinimumMemory=10485760
    g_pc1GpuUtilization=0
    g_pc1MaxMemory=68719476736
    g_pc1MaxParallelism=1
    g_pc1MaxParallelismGpu=0
    g_pc1MinimumMemory=60129542144
}

function worker_advanced_finetuning_pc2_32g_defaults
{
    g_pc2BaseMinimumMemory=1073741824
    g_pc2GpuUtilization=1
    g_pc2MaxMemory=16106127360
    g_pc2MaxParallelism=-1
    g_pc2MaxParallelismGpu=6
    g_pc2MinimumMemory=16106127360
}

function worker_advanced_finetuning_c1_32g_defaults
{
    g_c1BaseMinimumMemory=1073741824
    g_c1GpuUtilization=0
    g_c1MaxMemory=1073741824
    g_c1MaxParallelism=0
    g_c1MaxParallelismGpu=0
    g_c1MinimumMemory=1073741824
}

function worker_advanced_finetuning_c2_32g_defaults
{
    g_c2BaseMinimumMemory=34359738368
    g_c2GpuUtilization=1
    g_c2MaxMemory=161061273600
    g_c2MaxParallelism=-1
    g_c2MaxParallelismGpu=6
    g_c2MinimumMemory=32212254720
}

function worker_advanced_finetuning_uns_32g_defaults
{
    g_unsBaseMinimumMemory=10485760
    g_unsGpuUtilization=0
    g_unsMaxMemory=68719476736
    g_unsMaxParallelism=1
    g_unsMaxParallelismGpu=0
    g_unsMinimumMemory=60129542144
}

function worker_advanced_finetuning_get_32g_defaults
{
    g_getBaseMinimumMemory=0
    g_getGpuUtilization=0
    g_getMaxMemory=1048576
    g_getMaxParallelism=0
    g_getMaxParallelismGpu=0
    g_getMinimumMemory=1048576
}

function worker_advanced_finetuning_all_32g_defaults
{
    worker_advanced_finetuning_ap_32g_defaults
    worker_advanced_finetuning_pc1_32g_defaults
    worker_advanced_finetuning_pc2_32g_defaults
    worker_advanced_finetuning_c1_32g_defaults
    worker_advanced_finetuning_c2_32g_defaults
    worker_advanced_finetuning_uns_32g_defaults
    worker_advanced_finetuning_get_32g_defaults
}

function worker_advanced_first
{
    local state=$E_CREATE_ADVANCED_QUIT

    IFS=' '
    read -a strarr <<< "$g_tasks"

    local current=$([ "${strarr[0]}" ] && echo "${strarr[0]}")
    eval "state=\${E_CREATE_ADVANCED_FINETUNING_$current}"
    if [ -z "${state}" ]; then
        state=$E_CREATE_ADVANCED_FLAGS
    fi

    return $state
}

function worker_advanced_last
{
    local state=$E_CREATE_ADVANCED_QUIT

    IFS=' '
    read -a strarr <<< "$g_tasks"

    local current=$([ "${strarr[-1]}" ] && echo "${strarr[-1]}")
    eval "state=\${E_CREATE_ADVANCED_FINETUNING_$current}"
    if [ -z "${state}" ]; then
        state=$E_CREATE_ADVANCED_PARAMETERS
    fi

    return $state
}

function worker_advanced_next
{
    local current=${@:1}
    local state=$E_CREATE_ADVANCED_QUIT

    IFS=' '
    read -a strarr <<< "$g_tasks"

    for i in "${!strarr[@]}"; do
        if [[ "${strarr[$i]}" = "${current}" ]]; then
            ((i++)); current=$([ "${strarr[$i]}" ] && echo "${strarr[$i]}")
            break
        fi
    done

    eval "state=\${E_CREATE_ADVANCED_FINETUNING_$current}"
    if [ -z "${state}" ]; then
        state=$E_CREATE_ADVANCED_FLAGS
    fi
    
    return $state
}

function worker_advanced_prev
{
    local current=${@:1}
    local state=$E_CREATE_ADVANCED_QUIT

    IFS=' '
    read -a strarr <<< "$g_tasks"

    for i in "${!strarr[@]}"; do
        if [[ "${strarr[$i]}" = "${current}" ]]; then
            ((i--)); 
            if [[ "$i" -lt 0 ]]; then
                current=""
            else
                current=$([ "${strarr[$i]}" ] && echo "${strarr[$i]}")
            fi
            break
        fi
    done

    eval "state=\${E_CREATE_ADVANCED_FINETUNING_$current}"
    if [ -z "${state}" ]; then
        state=$E_CREATE_ADVANCED_PARAMETERS
    fi
    
    return $state
}

function create_worker_type
{
    local state=$E_CREATE_QUIT
    worker_type_dialog
    
    case $? in
        $DIALOG_NEXT ) 	
            if [[ "$g_type" == "Seal" ]]; then
                state=$E_CREATE_TASKS
            else
                state=$E_CREATE_SUMMARY
            fi ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_GENERALPARAMS 
            ;;
    esac

    return $state
}

function create_worker_advanced_finetuning_ap_32
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_ap_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next AP
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev AP
            state=$?
            ;;
    esac

    worker_advanced_finetuning_ap_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_pc1_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_pc1_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next PC1
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev PC1
            state=$?
            ;;
    esac

    worker_advanced_finetuning_pc1_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_pc2_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_pc2_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next PC2
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev PC2
            state=$?
            ;;
    esac

    worker_advanced_finetuning_pc2_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_c1_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_c1_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next C1
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev C1
            state=$?
            ;;
    esac

    worker_advanced_finetuning_c1_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_c2_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_c2_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next C2
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev C2
            state=$?
            ;;
    esac

    worker_advanced_finetuning_c2_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_uns_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_uns_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next UNS
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev UNS
            state=$?
            ;;
    esac

    worker_advanced_finetuning_uns_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_get_32g
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_finetuning_get_32g_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_next GET
            state=$?
            ;;
        $DIALOG_BACK )
            worker_advanced_prev GET
            state=$?
            ;;
    esac

    worker_advanced_finetuning_get_32g_postprocessing
    return $state
}

function create_worker_advanced_finetuning_gsk_32g
{
    
}

function create_worker_advanced_finetuning_pr2_32g
{

}

function create_worker_advanced_finetuning_ru_32g
{

}

function create_worker_tasks
{
    local state=$E_CREATE_QUIT
    worker_tasks_dialog

    case $? in
        $DIALOG_NEXT ) 
            state=$E_CREATE_SUMMARY 
            ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_TYPE 
            ;;
    esac

    g_tasks="C1 GET $g_tasks"

    return $state
}

function worker_advanced_finetuning_ap_32g_exports
{
    if $(is_task_enabled AP); then
        g_exports+="export AP_32G_BASE_MIN_MEMORY=$g_apBaseMinimumMemory\n"
        g_exports+="export AP_32G_GPU_UTILIZATION=$g_apGpuUtilization\n"
        g_exports+="export AP_32G_MAX_MEMORY=$g_apMaxMemory\n"
        g_exports+="export AP_32G_MAX_PARALLELISM=$g_apMaxParallelism\n"
        g_exports+="export AP_32G_MAX_PARALLELISM_GPU=$g_apMaxParallelismGpu\n"
        g_exports+="export AP_32G_MIN_MEMORY=$g_apMinimumMemory\n"
    fi
}

function worker_advanced_finetuning_pc1_32g_exports
{
    if $(is_task_enabled PC1); then
        g_exports+="export PC1_32G_BASE_MIN_MEMORY=$g_pc1BaseMinimumMemory\n"
        g_exports+="export PC1_32G_GPU_UTILIZATION=$g_pc1GpuUtilization\n"
        g_exports+="export PC1_32G_MAX_MEMORY=$g_pc1MaxMemory\n"
        g_exports+="export PC1_32G_MAX_PARALLELISM=$g_pc1MaxParallelism\n"
        g_exports+="export PC1_32G_MAX_PARALLELISM_GPU=$g_pc1MaxParallelismGpu\n"
        g_exports+="export PC1_32G_MIN_MEMORY=$g_pc1MinimumMemory\n"
    fi
}

function worker_advanced_finetuning_pc2_32g_exports
{
    if $(is_task_enabled PC2); then
        g_exports+="export PC2_32G_BASE_MIN_MEMORY=$g_pc2BaseMinimumMemory\n"
        g_exports+="export PC2_32G_GPU_UTILIZATION=$g_pc2GpuUtilization\n"
        g_exports+="export PC2_32G_MAX_MEMORY=$g_pc2MaxMemory\n"
        g_exports+="export PC2_32G_MAX_PARALLELISM=$g_pc2MaxParallelism\n"
        g_exports+="export PC2_32G_MAX_PARALLELISM_GPU=$g_pc2MaxParallelismGpu\n"
        g_exports+="export PC2_32G_MIN_MEMORY=$g_pc2MinimumMemory\n"
    fi
}

function worker_advanced_finetuning_c1_32g_exports
{
    if $(is_task_enabled C1); then
        g_exports+="export C1_32G_BASE_MIN_MEMORY=$g_c1BaseMinimumMemory\n"
        g_exports+="export C1_32G_GPU_UTILIZATION=$g_c1GpuUtilization\n"
        g_exports+="export C1_32G_MAX_MEMORY=$g_c1MaxMemory\n"
        g_exports+="export C1_32G_MAX_PARALLELISM=$g_c1MaxParallelism\n"
        g_exports+="export C1_32G_MAX_PARALLELISM_GPU=$g_c1MaxParallelismGpu\n"
        g_exports+="export C1_32G_MIN_MEMORY=$g_c1MinimumMemory\n"
    fi
}

function worker_advanced_finetuning_c2_32g_exports
{
    if $(is_task_enabled C2); then
        g_exports+="export C2_32G_BASE_MIN_MEMORY=$g_c2BaseMinimumMemory\n"
        g_exports+="export C2_32G_GPU_UTILIZATION=$g_c2GpuUtilization\n"
        g_exports+="export C2_32G_MAX_MEMORY=$g_c2MaxMemory\n"
        g_exports+="export C2_32G_MAX_PARALLELISM=$g_c2MaxParallelism\n"
        g_exports+="export C2_32G_MAX_PARALLELISM_GPU=$g_c2MaxParallelismGpu\n"
        g_exports+="export C2_32G_MIN_MEMORY=$g_c2MinimumMemory\n"
    fi
}

function worker_advanced_finetuning_uns_32g_exports
{
    if $(is_task_enabled UNS); then
        g_exports+="export UNS_32G_BASE_MIN_MEMORY=$g_unsBaseMinimumMemory\n"
        g_exports+="export UNS_32G_GPU_UTILIZATION=$g_unsGpuUtilization\n"
        g_exports+="export UNS_32G_MAX_MEMORY=$g_unsMaxMemory\n"
        g_exports+="export UNS_32G_MAX_PARALLELISM=$g_unsMaxParallelism\n"
        g_exports+="export UNS_32G_MAX_PARALLELISM_GPU=$g_unsMaxParallelismGpu\n"
        g_exports+="export UNS_32G_MIN_MEMORY=$g_unsMinimumMemory\n"
    fi
}

function worker_advanced_finetuning_get_32g_exports
{
    if $(is_task_enabled GET); then
        g_exports+="export GET_32G_BASE_MIN_MEMORY=$g_getBaseMinimumMemory\n"
        g_exports+="export GET_32G_GPU_UTILIZATION=$g_getGpuUtilization\n"
        g_exports+="export GET_32G_MAX_MEMORY=$g_getMaxMemory\n"
        g_exports+="export GET_32G_MAX_PARALLELISM=$g_getMaxParallelism\n"
        g_exports+="export GET_32G_MAX_PARALLELISM_GPU=$g_getMaxParallelismGpu\n"
        g_exports+="export GET_32G_MIN_MEMORY=$g_getMinimumMemory\n"
    fi
}

function create_worker_summary_finish
{
    local wrepopath="$HOME/.lotusworkers/$g_name"
    mkdir -p $wrepopath/tmpdir

    g_exports=''
    g_exports+="export BELLMAN_CPU_UTILIZATION=$g_cpuUtilization\n"
    g_exports+="export TMPDIR=$wrepopath/tmpdir\n"
    g_exports+="export CUDA_VISIBLE_DEVICES=$g_gpus\n"
    g_exports+="export LOTUS_WORKER_PATH=$wrepopath\n"

    if [[ "$g_type" == "Seal" ]]; then
        g_exports+="export LOTUS_CUSTOM_ADDPIECE=$(is_task_tf AP)\n"
        g_exports+="export LOTUS_CUSTOM_PRECOMMIT1=$(is_task_tf PC1)\n"
        g_exports+="export LOTUS_CUSTOM_PRECOMMIT2=$(is_task_tf PC2)\n"
        g_exports+="export LOTUS_CUSTOM_COMMIT=$(is_task_tf C2)\n"
        g_exports+="export LOTUS_CUSTOM_UNSEAL=$(is_task_tf UNS)\n"
        g_exports+="export LOTUS_CUSTOM_REPLICA_UPDATE=$(is_task_tf RU)\n"
        g_exports+="export LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2=$(is_task_tf PR2)\n"
        g_exports+="export LOTUS_CUSTOM_REGEN_SECTOR_KEY=$(is_task_tf GSK)\n"
    else
        g_exports+="export LOTUS_CUSTOM_WINDOWPOST=$(is_type_tf WdPoSt)\n"
        g_exports+="export LOTUS_CUSTOM_WINNINGPOST=$(is_type_tf WinPoSt)\n"
    fi

    if [[ "$g_type" == "Seal" ]]; then
        worker_advanced_finetuning_ap_32g_exports
        worker_advanced_finetuning_pc1_32g_exports
        worker_advanced_finetuning_pc2_32g_exports
        worker_advanced_finetuning_c1_32g_exports
        worker_advanced_finetuning_c2_32g_exports
        worker_advanced_finetuning_uns_32g_exports
        worker_advanced_finetuning_get_32g_exports
    fi

    g_exports+="export LOTUS_CUSTOM_PORT=$g_port\n"
    g_exports+="export LOTUS_CUSTOM_CPUGROUP=$g_cpuGroup\n"
    g_exports+="export FIL_PROOFS_USE_MULTICORE_SDR=$(is_flag_io SDR)\n"

    if [ ! -z "$g_bellmanCustomGpu" ]; then
        g_exports+="export BELLMAN_CUSTOM_GPU='$g_bellmanCustomGpu'\n"
    fi

    echo -e "$g_exports" | tee $wrepopath/$g_name.env

    dialog --title 'Create Worker' \
           --backtitle 'Lotus Worker Manager' \
           --msgbox "Worker $g_name created!" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function create_worker_summary
{
    local state=$E_CREATE_QUIT
    worker_summary_dialog

    case $? in
        $DIALOG_FINISH ) 
            create_worker_summary_finish
            ;;
        $DIALOG_BACK ) 
            if [[ "$g_type" == "Seal" ]]; then
                state=$E_CREATE_TASKS
            else
                state=$E_CREATE_TYPE
            fi ;;
        $DIALOG_CANCEL ) 
            state=$E_CREATE_ADVANCED
            ;;
    esac

    return $state
}

function create_worker_advanced_parameters
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_parameters_dialog

    case $? in
        $DIALOG_NEXT )
            worker_advanced_first
            state=$?
            ;;
    esac

    worker_advanced_parameters_postprocessing
    return $state
}

function worker_advanced_parameters_postprocessing
{
    if [ -n "$g_advancedParams" ]; then
        readarray -t strarr <<< "$g_advancedParams"
        g_cpuUtilization=${strarr[0]}
        g_bellmanCustomGpu=${strarr[1]}
    fi
}

function create_worker_advanced_flags
{
    local state=$E_CREATE_ADVANCED_QUIT
    worker_advanced_flags_dialog

    case $? in
        $DIALOG_BACK )
            worker_advanced_last
            state=$?
            ;;
    esac

    return $state
}

function create_worker_advanced
{
    local state=$E_CREATE_ADVANCED_PARAMETERS
    while [[ $state -ne $E_CREATE_ADVANCED_QUIT ]]; do
        case $state in
            $E_CREATE_ADVANCED_PARAMETERS ) 
                create_worker_advanced_parameters 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_AP ) 
                create_worker_advanced_finetuning_ap_32 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_PC1 ) 
                create_worker_advanced_finetuning_pc1_32g 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_PC2 ) 
                create_worker_advanced_finetuning_pc2_32g 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_C1 ) 
                create_worker_advanced_finetuning_c1_32g 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_C2 ) 
                create_worker_advanced_finetuning_c2_32g 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_UNS ) 
                create_worker_advanced_finetuning_uns_32g 
                ;;
            $E_CREATE_ADVANCED_FINETUNING_GET ) 
                create_worker_advanced_finetuning_get_32g 
                ;;
            $E_CREATE_ADVANCED_FLAGS ) 
                create_worker_advanced_flags 
                ;;
        esac
        state=$?
    done

    return $E_CREATE_SUMMARY
}

function create_worker
{
    local state=$E_CREATE_GENERALPARAMS
    while [[ $state -ne $E_CREATE_QUIT ]]; do
        case $state in
            $E_CREATE_GENERALPARAMS ) create_worker_generalparams ;;
            $E_CREATE_TYPE ) create_worker_type ;;
            $E_CREATE_TASKS ) create_worker_tasks ;;
            $E_CREATE_SUMMARY ) create_worker_summary ;;
            $E_CREATE_ADVANCED ) create_worker_advanced ;;
        esac
        state=$?
    done
}

function delete_worker_delete
{
    local wrepopath="$HOME/.lotusworkers/$g_name"
    dialog --yesno "Delete $g_name?" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-

    local result=$?
    case $result in
        $DIALOG_YES )
            rm -R $wrepopath
            dialog --msgbox "$g_name deleted!" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
            ;;
    esac
}

function delete_worker
{
    g_name=$(dialog \
        --title 'Delete Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Delete' \
        --inputbox 'Name' $HEIGHT $WIDTH '' \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    case $result in
        $DIALOG_OK ) 
            delete_worker_delete
            ;;
    esac
}

function list_workers
{
    local text=$(ls -1 "$HOME/.lotusworkers")
    if [ -z "$text" ]; then
        text="No workers exist yet."
    fi

    dialog --title 'List Workers' \
           --backtitle 'Lotus Worker Manager' \
           --msgbox "$text" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

##
## BEGIN MAIN
##
worker_advanced_finetuning_all_32g_defaults

while true; do
    selection=$(dialog \
        --title 'Main Menu' \
        --backtitle 'Lotus Worker Manager' \
        --cancel-label 'Quit' \
        --menu 'Please Select' $HEIGHT $WIDTH 4 \
        1 'Create Worker' \
        2 'Delete Worker' \
        3 'List Workers' \
        3>&1 1>&2 2>&3 3>&-)

    exit_status=$?
    case $exit_status in
        $DIALOG_QUIT | $DIALOG_ESC )
            clear; echo 'Lotus Worker Manager terminated.'
            exit ;;
    esac

    case $selection in
        1 ) create_worker ;;
        2 ) delete_worker ;;
        3 ) list_workers ;;
    esac
done
