#!/usr/bin/bash

readonly DIALOG_OK=0
readonly DIALOG_YES=0
readonly DIALOG_NEXT=0
readonly DIALOG_DONE=0
readonly DIALOG_FINISH=0
readonly DIALOG_CANCEL=1
readonly DIALOG_QUIT=1
readonly DIALOG_HELP=2
readonly DIALOG_BACK=3
readonly DIALOG_EXTRA=3
readonly DIALOG_ADVANCED=3
readonly DIALOG_ITEM_HELP=4
readonly DIALOG_ESC=255

readonly HEIGHT=0
readonly WIDTH=0

for i in \
    E_CREATE_GENERALPARAMS E_CREATE_TYPE E_CREATE_TASKS E_CREATE_SUMMARY E_CREATE_ADVANCED E_CREATE_QUIT \
    E_MODIFY_GENERALPARAMS E_MODIFY_TYPE E_MODIFY_TASKS E_MODIFY_SUMMARY E_MODIFY_ADVANCED E_MODIFY_QUIT \
    E_CREATE_ADVANCED_PAGE1 E_CREATE_ADVANCED_PAGE2 E_CREATE_ADVANCED_QUIT; do \
    readonly ${i}=$((x++)); done

declare -A g_allTasks
g_allTasks[LOTUS_CUSTOM_ADDPIECE]=false
g_allTasks[LOTUS_CUSTOM_PRECOMMIT1]=false
g_allTasks[LOTUS_CUSTOM_PRECOMMIT2]=false
g_allTasks[LOTUS_CUSTOM_COMMIT]=false
g_allTasks[LOTUS_CUSTOM_UNSEAL]=false
g_allTasks[LOTUS_CUSTOM_REPLICA_UPDATE]=false
g_allTasks[LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2]=false
g_allTasks[LOTUS_CUSTOM_REGEN_SECTOR_KEY]=false

declare -A -r g_isEnabled=([true]=on [false]=off)

declare -A g_allGeneralParameters
g_allGeneralParameters[LOTUS_CUSTOM_NAME]=''
g_allGeneralParameters[LOTUS_CUSTOM_PORT]=''
g_allGeneralParameters[CUDA_VISIBLE_DEVICES]=''

declare -A g_allAdvancedParameters
g_allAdvancedParameters[BELLMAN_CPU_UTILIZATION]=0.01

declare -A g_allTypes
g_allTypes[Seal]=true
g_allTypes[WdPoSt]=false
g_allTypes[WinPoSt]=false

declare -A g_allFlags
g_allFlags[FIL_PROOFS_USE_MULTICORE_SDR]=true

function dialog_redirect_io
{
    echo -n '3>&1 1>&2 2>&3 3>&-'
}

function reset_all_types
{
    for _type in "${!g_allTypes[@]}"; do
        g_allTypes[$_type]=false 
    done
}

function reset_all_tasks
{
    for task in "${!g_allTasks[@]}"; do
        g_allTasks[$task]=false 
    done
}

function reset_all_flags
{
    for flag in "${!g_allFlags[@]}"; do
	    g_allFlags[$flag]=false
    done
}

function is_task_enabled
{
    local task=${@:1}
    echo ${g_isEnabled[${g_allTasks[${task}]}]}
}

function is_type_enabled
{
    local type=${@:1}
    echo ${g_isEnabled[${g_allTypes[${type}]}]}
}

function is_flag_enabled
{
    local flag=${@:1}
    echo ${g_isEnabled[${g_allFlags[${flag}]}]}
}

function create_worker_generalparams
{
    declare generalParams

    local state=$E_CREATE_QUIT
    generalParams=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --form 'General Parameters' $HEIGHT $WIDTH 10 \
        'Name' 1 1 "${g_allGeneralParameters[LOTUS_CUSTOM_NAME]}" 1 20 20 0 \
        'Port' 2 1 "${g_allGeneralParameters[LOTUS_CUSTOM_PORT]}" 2 20 20 0 \
        'GPUs' 3 1 "${g_allGeneralParameters[CUDA_VISIBLE_DEVICES]}" 3 20 20 0 \
        3>&1 1>&2 2>&3 3>&-)
    
    local result=$?
    case $result in
        $DIALOG_NEXT )
            state=$E_CREATE_TYPE 
            ;;
    esac

    if [ -n "$generalParams" ]; then
        read -a strarr <<< "$generalParams"
        g_allGeneralParameters[LOTUS_CUSTOM_NAME]=${strarr[0]}
        g_allGeneralParameters[LOTUS_CUSTOM_PORT]=${strarr[1]}
        g_allGeneralParameters[CUDA_VISIBLE_DEVICES]=${strarr[2]}
    fi

    return $state
}

function create_worker_type
{
    declare type

    local state=$E_CREATE_QUIT
    type=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
	    --extra-button \
	    --extra-label 'Back' \
	    --no-tags \
	    --no-cancel \
        --radiolist 'Select Type' $HEIGHT $WIDTH 3 \
        Seal 'Sealer' $(is_type_enabled Seal) \
        WdPoSt 'WindowPoSt' $(is_type_enabled WdPoSt) \
        WinPoSt 'WinningPoSt' $(is_type_enabled WinPoSt) \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    if [ -n "$type" ]; then
	    reset_all_types	
    	[[ -v g_allTypes[$type] ]] && g_allTypes[$type]=true
    fi

    case $result in
        $DIALOG_NEXT ) 	
            if [[ "${g_allTypes[Seal]}" == "true" ]]; then
                state=$E_CREATE_TASKS
            else
                state=$E_CREATE_SUMMARY
            fi ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_GENERALPARAMS 
            ;;
    esac

    return $state
}

function create_worker_tasks
{
    declare tasks

    local state=$E_CREATE_QUIT
    tasks=$(dialog \
        --title 'Creater Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
	    --extra-button \
        --extra-label 'Back' \
	    --no-cancel \
        --no-tags \
        --checklist 'Select Tasks' $HEIGHT $WIDTH 10 \
        LOTUS_CUSTOM_ADDPIECE               'AddPiece'               $(is_task_enabled LOTUS_CUSTOM_ADDPIECE) \
        LOTUS_CUSTOM_PRECOMMIT1             'PreCommit1'             $(is_task_enabled LOTUS_CUSTOM_PRECOMMIT1) \
        LOTUS_CUSTOM_PRECOMMIT2             'PreCommit2'             $(is_task_enabled LOTUS_CUSTOM_PRECOMMIT2) \
        LOTUS_CUSTOM_COMMIT                 'Commit'                 $(is_task_enabled LOTUS_CUSTOM_COMMIT) \
        LOTUS_CUSTOM_UNSEAL                 'Unseal'                 $(is_task_enabled LOTUS_CUSTOM_UNSEAL) \
        LOTUS_CUSTOM_REPLICA_UPDATE         'Replica Update'         $(is_task_enabled LOTUS_CUSTOM_REPLICA_UPDATE) \
        LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2  'Prove Replica Update 2' $(is_task_enabled LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2) \
        LOTUS_CUSTOM_REGEN_SECTOR_KEY       'Regen Sector Key'       $(is_task_enabled LOTUS_CUSTOM_REGEN_SECTOR_KEY) \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    if [ -n "$tasks" ]; then
        reset_all_tasks
        read -a strarr <<< "$tasks"
        for task in "${strarr[@]}"; do
            [[ -v g_allTasks[$task] ]] && g_allTasks[$task]=true
        done
    fi

    case $result in
        $DIALOG_NEXT ) 
            state=$E_CREATE_SUMMARY 
            ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_TYPE 
            ;;
    esac

    return $state
}

function create_worker_summary_finish
{
    local wrepopath="$HOME/.lotusworkers/$g_name"
    mkdir -p $wrepopath/tmpdir

    declare exports
    exports+="export LOTUS_WORKER_PATH=$wrepopath;"
    exports+="export TMPDIR=$wrepopath/tmpdir;"

    for param in "${!g_allGeneralParameters[@]}"; do
        exports+="export ${param}=${g_allGeneralParameters[${param}]}"
    done

    for param in "${!g_allAdvancedParameters[@]}"; do
        exports+="export ${param}=${g_allAdvancedParameters[${param}]}"
    done

    for flag in "${!g_allFlags[@]}"; do
        exports+="export ${flag}=${g_allFlags[${flag}]}"
    done

    if [[ "${g_allTypes[Seal]}" == "true" ]]; then
        for task in "${!g_allTasks[@]}"; do
            exports+="export ${task}=${g_allTasks[${task}]};"
        done
    elif [[ "${g_allTypes[WdPoSt]}" == "true" ]]; then
        exports+="export LOTUS_CUSTOM_WINDOWPOST=true"
    elif [[ "${g_allTypes[WinPoSt]}" == "true" ]]; then
        exports+="export LOTUS_CUSTOM_WINNINGPOST=true"
    fi        

    echo "$exports" | tee $wrepopath/$g_name.env

    dialog --title 'Create Worker' \
           --backtitle 'Lotus Worker Manager' \
           --msgbox "Worker $g_name created!" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function create_worker_summary
{
    declare summary
    summary+="Worker will be created:\n\n"
    summary+="Name:   ${g_allGeneralParameters[LOTUS_CUSTOM_NAME]}\n"
    summary+="Port:   ${g_allGeneralParameters[LOTUS_CUSTOM_PORT]}\n"
    
    if [[ "${g_allTypes[Seal]}" == "true" ]]; then
	summary+="Tasks:  $g_tasks\n\n"
    elif [[ "${g_allTypes[WdPoSt]}" == "true" ]]; then
	summary+="Tasks:  WindowPoSt\n\n"
    elif [[ "${g_allTypes[WinPoSt]}" == "true" ]]; then
	summary+="Tasks:  WinningPoSt\n\n"
    else
	summary+="Tasks:  Unknown\n\n"
    fi

    summary+="Proceed?"
    
    local state=$E_CREATE_QUIT
    dialog --title 'Create Worker' \
           --backtitle 'Lotus Worker Manager' \
           --ok-label 'Finish' \
           --extra-button \
           --extra-label 'Back' \
	       --cancel-label 'Advanced' \
           --yesno "${summary}" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-

    local result=$?
    case $result in
        $DIALOG_FINISH ) 
            create_worker_summary_finish
            ;;
        $DIALOG_BACK ) 
            if [[ "${g_allTypes[Seal]}" == "true" ]]; then
                state=$E_CREATE_TASKS
            else
                state=$E_CREATE_TYPE
            fi ;;
        $DIALOG_CANCEL ) 
            state=$E_CREATE_ADVANCED
            ;;
    esac

    return $state
}

function create_worker_advanced_page1
{
    declare advancedParams

    local state=$E_CREATE_ADVANCED_QUIT
    advancedParams=$(dialog \
	    --title 'Create Worker' \
	    --backtitle 'Lotus Worker Manager' \
	    --ok-label 'Next' \
	    --no-cancel \
	    --form 'Advanced Parameters' $HEIGHT $WIDTH 10 \
        'Bellman CPU Utilization' 1 1 "${g_allAdvancedParameters[BELLMAN_CPU_UTILIZATION]}" 1 20 20 0 \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    case $result in
	$DIALOG_NEXT )
        read -a strarr <<< "$advancedParams"
        g_allAdvancedParameters[BELLMAN_CPU_UTILIZATION]=${strarr[0]}
	    state=$E_CREATE_ADVANCED_PAGE2
	    ;;
    esac

    return $state
}

function create_worker_advanced_page2
{
    declare advancedFlags

    local state=$E_CREATE_ADVANCED_QUIT
    advancedFlags=$(dialog \
		--title 'Create Worker' \
		--backtitle 'Lotus Worker Manager' \
		--extra-button \
		--extra-label 'Back' \
		--no-cancel \
		--no-tags \
		--checklist 'Advanced Flags' $HEIGHT $WIDTH 10 \
        FIL_PROOFS_USE_MULTICORE_SDR 'Use Multicore SDR' $(is_flag_enabled FIL_PROOFS_USE_MULTICORE_SDR) \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    case $result in
        $DIALOG_BACK )
            state=$E_CREATE_ADVANCED_PAGE1
            ;;
    esac

    if [ -n "$g_advancedFlags" ]; then
        reset_all_flags
        read -a strarr <<< "$advancedFlags"
        for flag in "${strarr[@]}"; do
            g_allFlags["$flag"]=true
        done
    fi

    return $state
}

function create_worker_advanced
{
    local state=$E_CREATE_ADVANCED_PAGE1
    while [[ $state -ne $E_CREATE_ADVANCED_QUIT ]]; do
        case $state in
            $E_CREATE_ADVANCED_PAGE1 ) create_worker_advanced_page1 ;;
            $E_CREATE_ADVANCED_PAGE2 ) create_worker_advanced_page2 ;;
        esac
        state=$?
    done

    return $E_CREATE_SUMMARY
}

function create_worker
{
    local state=$E_CREATE_GENERALPARAMS
    while [[ $state -ne $E_CREATE_QUIT ]]; do
        case $state in
            $E_CREATE_GENERALPARAMS ) create_worker_generalparams ;;
            $E_CREATE_TYPE ) create_worker_type ;;
            $E_CREATE_TASKS ) create_worker_tasks ;;
            $E_CREATE_SUMMARY ) create_worker_summary ;;
            $E_CREATE_ADVANCED ) create_worker_advanced ;;
        esac
        state=$?
    done
}

function delete_worker_delete
{
    local wrepopath=${@:1}
    dialog --yesno "Delete $g_name?" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-

    local result=$?
    case $result in
        $DIALOG_YES )
            rm -R $wrepopath
            dialog --msgbox "$g_name deleted!" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
            ;;
    esac
}

function delete_worker
{
    declare name
    name=$(dialog \
        --title 'Delete Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Delete' \
        --inputbox "$label" $HEIGHT $WIDTH "$name" \
        3>&1 1>&2 2>&3 3>&-)

    local result=$?
    local wrepopath="$HOME/.lotusworkers/$name"
    case $result in
        $DIALOG_OK ) 
            delete_worker_delete $wrepopath
            ;;
    esac
}

function list_workers
{
    local text=$(ls -1 "$HOME/.lotusworkers")
    if [ -z "$text" ]; then
        text="No workers exist yet."
    fi

    dialog --title 'List Workers' \
           --backtitle 'Lotus Worker Manager' \
           --msgbox "$text" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

while true; do
    selection=$(dialog \
        --title 'Main Menu' \
        --backtitle 'Lotus Worker Manager' \
        --cancel-label 'Quit' \
        --menu 'Please Select' $HEIGHT $WIDTH 4 \
        1 'Create Worker' \
        2 'Modify Worker' \
        3 'Delete Worker' \
        4 'List Workers' \
        3>&1 1>&2 2>&3 3>&-)

    exit_status=$?
    case $exit_status in
        $DIALOG_QUIT | $DIALOG_ESC )
            clear; echo 'Lotus Worker Manager terminated.'
            exit ;;
    esac

    case $selection in
        1 ) create_worker ;;
        2 ) modify_worker ;;
        3 ) delete_worker ;;
        4 ) list_workers ;;
    esac
done
