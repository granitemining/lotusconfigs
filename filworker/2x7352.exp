#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Jan 15 16:05:41 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./create-cgroups.sh
match_max 100000
expect -exact "How many CPUs? >"
send -- "2\r"
expect -exact "2\r
How many core complexes per CPU? >"
send -- "8\r"
expect -exact "8\r
How many cores per complex? >"
send -- "3\r"
expect -exact "3\r
How many memory nodes >"
send -- "2\r"
expect -exact "2\r
Hyperthreading? \[y/n\] >"
send -- "y\r"
expect -exact "y\r
Which user will own the cgroups? >"
send -- "calibnet\r"
expect -exact "calibnet\r
Which group will own the cgroups? >"
send -- "fil\r"
expect -exact "fil\r
Is the above correct? \[y/n\] >"
send -- "y\r"
expect -exact "y\r
all :: cpus = 0-95 & mems = 0-1\r
all/ccx0 :: cpus = 0-2 & mems = 0\r
all/ccx0/c0 :: cpus = 0 & mems = 0\r
all/ccx0/c1 :: cpus = 1 & mems = 0\r
all/ccx0/c2 :: cpus = 2 & mems = 0\r
all/ccx1 :: cpus = 3-5 & mems = 0\r
all/ccx1/c3 :: cpus = 3 & mems = 0\r
all/ccx1/c4 :: cpus = 4 & mems = 0\r
all/ccx1/c5 :: cpus = 5 & mems = 0\r
all/ccx2 :: cpus = 6-8 & mems = 0\r
all/ccx2/c6 :: cpus = 6 & mems = 0\r
all/ccx2/c7 :: cpus = 7 & mems = 0\r
all/ccx2/c8 :: cpus = 8 & mems = 0\r
all/ccx3 :: cpus = 9-11 & mems = 0\r
all/ccx3/c9 :: cpus = 9 & mems = 0\r
all/ccx3/c10 :: cpus = 10 & mems = 0\r
all/ccx3/c11 :: cpus = 11 & mems = 0\r
all/ccx4 :: cpus = 12-14 & mems = 0\r
all/ccx4/c12 :: cpus = 12 & mems = 0\r
all/ccx4/c13 :: cpus = 13 & mems = 0\r
all/ccx4/c14 :: cpus = 14 & mems = 0\r
all/ccx5 :: cpus = 15-17 & mems = 0\r
all/ccx5/c15 :: cpus = 15 & mems = 0\r
all/ccx5/c16 :: cpus = 16 & mems = 0\r
all/ccx5/c17 :: cpus = 17 & mems = 0\r
all/ccx6 :: cpus = 18-20 & mems = 0\r
all/ccx6/c18 :: cpus = 18 & mems = 0\r
all/ccx6/c19 :: cpus = 19 & mems = 0\r
all/ccx6/c20 :: cpus = 20 & mems = 0\r
all/ccx7 :: cpus = 21-23 & mems = 0\r
all/ccx7/c21 :: cpus = 21 & mems = 0\r
all/ccx7/c22 :: cpus = 22 & mems = 0\r
all/ccx7/c23 :: cpus = 23 & mems = 0\r
all/ccx8 :: cpus = 24-26 & mems = 0\r
all/ccx8/c24 :: cpus = 24 & mems = 0\r
all/ccx8/c25 :: cpus = 25 & mems = 0\r
all/ccx8/c26 :: cpus = 26 & mems = 0\r
all/ccx9 :: cpus = 27-29 & mems = 0\r
all/ccx9/c27 :: cpus = 27 & mems = 0\r
all/ccx9/c28 :: cpus = 28 & mems = 0\r
all/ccx9/c29 :: cpus = 29 & mems = 0\r
all/ccx10 :: cpus = 30-32 & mems = 0\r
all/ccx10/c30 :: cpus = 30 & mems = 0\r
all/ccx10/c31 :: cpus = 31 & mems = 0\r
all/ccx10/c32 :: cpus = 32 & mems = 0\r
all/ccx11 :: cpus = 33-35 & mems = 0\r
all/ccx11/c33 :: cpus = 33 & mems = 0\r
all/ccx11/c34 :: cpus = 34 & mems = 0\r
all/ccx11/c35 :: cpus = 35 & mems = 0\r
all/ccx12 :: cpus = 36-38 & mems = 0\r
all/ccx12/c36 :: cpus = 36 & mems = 0\r
all/ccx12/c37 :: cpus = 37 & mems = 0\r
all/ccx12/c38 :: cpus = 38 & mems = 0\r
all/ccx13 :: cpus = 39-41 & mems = 0\r
all/ccx13/c39 :: cpus = 39 & mems = 0\r
all/ccx13/c40 :: cpus = 40 & mems = 0\r
all/ccx13/c41 :: cpus = 41 & mems = 0\r
all/ccx14 :: cpus = 42-44 & mems = 0\r
all/ccx14/c42 :: cpus = 42 & mems = 0\r
all/ccx14/c43 :: cpus = 43 & mems = 0\r
all/ccx14/c44 :: cpus = 44 & mems = 0\r
all/ccx15 :: cpus = 45-47 & mems = 0\r
all/ccx15/c45 :: cpus = 45 & mems = 0\r
all/ccx15/c46 :: cpus = 46 & mems = 0\r
all/ccx15/c47 :: cpus = 47 & mems = 0\r
all/ccx16 :: cpus = 48-50 & mems = 1\r
all/ccx16/c48 :: cpus = 48 & mems = 1\r
all/ccx16/c49 :: cpus = 49 & mems = 1\r
all/ccx16/c50 :: cpus = 50 & mems = 1\r
all/ccx17 :: cpus = 51-53 & mems = 1\r
all/ccx17/c51 :: cpus = 51 & mems = 1\r
all/ccx17/c52 :: cpus = 52 & mems = 1\r
all/ccx17/c53 :: cpus = 53 & mems = 1\r
all/ccx18 :: cpus = 54-56 & mems = 1\r
all/ccx18/c54 :: cpus = 54 & mems = 1\r
all/ccx18/c55 :: cpus = 55 & mems = 1\r
all/ccx18/c56 :: cpus = 56 & mems = 1\r
all/ccx19 :: cpus = 57-59 & mems = 1\r
all/ccx19/c57 :: cpus = 57 & mems = 1\r
all/ccx19/c58 :: cpus = 58 & mems = 1\r
all/ccx19/c59 :: cpus = 59 & mems = 1\r
all/ccx20 :: cpus = 60-62 & mems = 1\r
all/ccx20/c60 :: cpus = 60 & mems = 1\r
all/ccx20/c61 :: cpus = 61 & mems = 1\r
all/ccx20/c62 :: cpus = 62 & mems = 1\r
all/ccx21 :: cpus = 63-65 & mems = 1\r
all/ccx21/c63 :: cpus = 63 & mems = 1\r
all/ccx21/c64 :: cpus = 64 & mems = 1\r
all/ccx21/c65 :: cpus = 65 & mems = 1\r
all/ccx22 :: cpus = 66-68 & mems = 1\r
all/ccx22/c66 :: cpus = 66 & mems = 1\r
all/ccx22/c67 :: cpus = 67 & mems = 1\r
all/ccx22/c68 :: cpus = 68 & mems = 1\r
all/ccx23 :: cpus = 69-71 & mems = 1\r
all/ccx23/c69 :: cpus = 69 & mems = 1\r
all/ccx23/c70 :: cpus = 70 & mems = 1\r
all/ccx23/c71 :: cpus = 71 & mems = 1\r
all/ccx24 :: cpus = 72-74 & mems = 1\r
all/ccx24/c72 :: cpus = 72 & mems = 1\r
all/ccx24/c73 :: cpus = 73 & mems = 1\r
all/ccx24/c74 :: cpus = 74 & mems = 1\r
all/ccx25 :: cpus = 75-77 & mems = 1\r
all/ccx25/c75 :: cpus = 75 & mems = 1\r
all/ccx25/c76 :: cpus = 76 & mems = 1\r
all/ccx25/c77 :: cpus = 77 & mems = 1\r
all/ccx26 :: cpus = 78-80 & mems = 1\r
all/ccx26/c78 :: cpus = 78 & mems = 1\r
all/ccx26/c79 :: cpus = 79 & mems = 1\r
all/ccx26/c80 :: cpus = 80 & mems = 1\r
all/ccx27 :: cpus = 81-83 & mems = 1\r
all/ccx27/c81 :: cpus = 81 & mems = 1\r
all/ccx27/c82 :: cpus = 82 & mems = 1\r
all/ccx27/c83 :: cpus = 83 & mems = 1\r
all/ccx28 :: cpus = 84-86 & mems = 1\r
all/ccx28/c84 :: cpus = 84 & mems = 1\r
all/ccx28/c85 :: cpus = 85 & mems = 1\r
all/ccx28/c86 :: cpus = 86 & mems = 1\r
all/ccx29 :: cpus = 87-89 & mems = 1\r
all/ccx29/c87 :: cpus = 87 & mems = 1\r
all/ccx29/c88 :: cpus = 88 & mems = 1\r
all/ccx29/c89 :: cpus = 89 & mems = 1\r
all/ccx30 :: cpus = 90-92 & mems = 1\r
all/ccx30/c90 :: cpus = 90 & mems = 1\r
all/ccx30/c91 :: cpus = 91 & mems = 1\r
all/ccx30/c92 :: cpus = 92 & mems = 1\r
all/ccx31 :: cpus = 93-95 & mems = 1\r
all/ccx31/c93 :: cpus = 93 & mems = 1\r
all/ccx31/c94 :: cpus = 94 & mems = 1\r
all/ccx31/c95 :: cpus = 95 & mems = 1\r
Create these cgroups? \[y/n\] >"
interact
