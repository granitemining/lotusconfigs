#!/usr/bin/env bash

readonly DIALOG_OK=0
readonly DIALOG_YES=0
readonly DIALOG_NEXT=0
readonly DIALOG_DONE=0
readonly DIALOG_FINISH=0
readonly DIALOG_CANCEL=1
readonly DIALOG_QUIT=1
readonly DIALOG_HELP=2
readonly DIALOG_BACK=3
readonly DIALOG_EXTRA=3
readonly DIALOG_ADVANCED=3
readonly DIALOG_ITEM_HELP=4
readonly DIALOG_ESC=255

readonly HEIGHT=0
readonly WIDTH=0

for i in \
    E_CREATE_GENERALPARAMS E_CREATE_TYPE E_CREATE_TASKS E_CREATE_SUMMARY E_CREATE_ADVANCED E_CREATE_QUIT \
    E_DELETE_SELECT E_DELETE_CONFIRM E_DELETE_QUIT \
    E_START_SELECT E_START_CONFIRM E_START_QUIT \
    E_STOP_SELECT E_STOP_CONFIRM E_STOP_QUIT \
    E_CREATE_ADVANCED_PARAMETERS E_CREATE_ADVANCED_CUSTOM E_CREATE_ADVANCED_FLAGS E_CREATE_ADVANCED_QUIT; do \
    readonly ${i}=$((x++)); done

declare g_name='pc1w1'
declare g_port='3401'
declare g_type='Seal'
declare g_gpus='0,1'
declare g_cpuUtilization='0.01'
declare g_tasks='PC1'
declare g_flags='SDR'
declare g_cpuGroup='all'
declare g_generalParams
declare g_advancedParams
declare g_advancedCustom
declare g_advancedCustomTempFile
declare g_bellmanCustomGpu
declare g_workersToStart
declare g_workersToStop
declare g_workersToDelete

function is_task_enabled
{
    local task=${@:1}
    [[ "$g_tasks" =~ (^|[[:space:]])"$task"($|[[:space:]]) ]]
}

function is_type_enabled
{
    local type=${@:1}
    [[ "$g_type" == "$type" ]]
}

function is_flag_enabled
{
    local flag=${@:1}
    [[ "$g_flags" =~ (^|[[:space:]])"$flag"($|[[:space:]]) ]]
}

function is_task_of
{
    local task=${@:1}
    is_task_enabled $task && echo 'on' \
    || echo 'off'
}

function is_task_tf
{
    local task=${@:1}
    is_task_enabled $task && echo 'true' \
    || echo 'false'
}

function is_type_of
{
    local type=${@:1}
    is_type_enabled $type && echo 'on' \
    || echo 'off'
}

function is_type_tf
{
    local type=${@:1}
    is_type_enabled $type && echo 'true' \
    || echo 'false'
}

function is_flag_of
{
    local flag=${@:1}
    is_flag_enabled $flag && echo 'on' \
    || echo 'off'
}

function is_flag_io
{
    local flag=${@:1}
    is_flag_enabled $flag && echo '1' \
    || echo '0'
}

function create_worker_generalparams_dialog
{
    g_generalParams=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --no-cancel \
        --form 'General Parameters' $HEIGHT $WIDTH 10 \
        'Name' 1 1 "$g_name" 1 20 20 0 \
        'Port' 2 1 "$g_port" 2 20 20 0 \
        'GPUs' 3 1 "$g_gpus" 3 20 20 0 \
        'CPU Group' 4 1 "$g_cpuGroup" 4 20 20 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_type_dialog
{
    g_type=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
	    --extra-button \
	    --extra-label 'Back' \
	    --no-tags \
	    --no-cancel \
        --radiolist 'Select Type' $HEIGHT $WIDTH 3 \
        Seal 'Sealer' $(is_type_of Seal) \
        WdPoSt 'WindowPoSt' $(is_type_of WdPoSt) \
        WinPoSt 'WinningPoSt' $(is_type_of WinPoSt) \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_advanced_parameters_dialog
{
    g_advancedParams=$(dialog \
	    --title 'Create Worker' \
	    --backtitle 'Lotus Worker Manager' \
	    --ok-label 'Next' \
	    --no-cancel \
	    --form 'Advanced Parameters' $HEIGHT $WIDTH 10 \
        'CPU Utilization' 1 1 "$g_cpuUtilization" 1 20 40 0 \
        'Bellman Custom GPU' 2 1 "$g_bellmanCustomGpu" 2 20 40 0 \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_advanced_custom_dialog
{
    g_advancedCustom=$(dialog \
        --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --extra-button \
        --extra-label 'Back' \
        --no-cancel \
        --editbox $g_advancedCustomTempFile $HEIGHT $WIDTH \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_advanced_flags_dialog
{
    g_flags=$(dialog \
		--title 'Create Worker' \
		--backtitle 'Lotus Worker Manager' \
		--extra-button \
		--extra-label 'Back' \
		--no-cancel \
		--no-tags \
		--checklist 'Advanced Flags' $HEIGHT $WIDTH 10 \
        SDR 'Use Multicore SDR' $(is_flag_of SDR) \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_tasks_dialog
{
    g_tasks=$(dialog \
        --title 'Creater Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Next' \
        --extra-button \
        --extra-label 'Back' \
        --no-cancel \
        --no-tags \
        --checklist 'Select Tasks' $HEIGHT $WIDTH 10 \
        AP  'AddPiece'               $(is_task_of AP) \
        PC1 'PreCommit1'             $(is_task_of PC1) \
        PC2 'PreCommit2'             $(is_task_of PC2) \
        C2  'Commit'                 $(is_task_of C2) \
        UNS 'Unseal'                 $(is_task_of UNS) \
        RU  'Replica Update'         $(is_task_of RU) \
        PR2 'Prove Replica Update 2' $(is_task_of PR2) \
        GSK 'Regen Sector Key'       $(is_task_of GSK) \
        3>&1 1>&2 2>&3 3>&-)
}

function create_worker_summary_dialog
{
    declare summary
    summary+="Worker will be created:\n\n"
    summary+="Name:   $g_name\n"
    summary+="Port:   $g_port\n"
    
    if [[ "$g_type" == "Seal" ]]; then
	    summary+="Tasks:  $g_tasks\n\n"
    else
        summary+="Tasks:  $g_type\n\n"
    fi

    summary+="Proceed?"

    dialog --title 'Create Worker' \
        --backtitle 'Lotus Worker Manager' \
        --ok-label 'Finish' \
        --extra-button \
        --extra-label 'Back' \
        --cancel-label 'Advanced' \
        --yesno "${summary}" $HEIGHT $WIDTH \
        3>&1 1>&2 2>&3 3>&-
}

function start_worker_select_dialog
{
    local checklist=$(start_worker_select_dialog_checklist)

    if [ -n "$checklist" ]; then
        g_workersToStart=$(dialog \
            --title 'Start Worker' \
            --backtitle 'Lotus Worker Manager' \
            --ok-label 'Next' \
            --no-cancel \
            --no-tags \
            --checklist 'Select Workers' $HEIGHT $WIDTH 10 $checklist \
            3>&1 1>&2 2>&3 3>&-)
    else
        dialog --msgbox "No workers to start." $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
        return $DIALOG_CANCEL
    fi
}

function start_worker_confirm_dialog
{
    dialog --title 'Start Worker' \
           --backtitle 'Lotus Worker Manager' \
           --yesno "Start $g_workersToStart?" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function stop_worker_select_dialog
{
    local checklist=$(stop_worker_select_dialog_checklist)

    if [ -n "$checklist" ]; then
        g_workersToStop=$(dialog \
            --title 'Stop Worker' \
            --backtitle 'Lotus Worker Manager' \
            --ok-label 'Next' \
            --no-cancel \
            --no-tags \
            --checklist 'Select Workers' $HEIGHT $WIDTH 10 $checklist \
            3>&1 1>&2 2>&3 3>&-)
    else
        dialog --msgbox "No workers to stop." $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
        return $DIALOG_CANCEL
    fi
}

function stop_worker_confirm_dialog
{
    dialog --title 'Stop Worker' \
           --backtitle 'Lotus Worker Manager' \
           --yesno "Stop $g_workersToStop?" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function delete_worker_select_dialog
{
    local checklist=$(delete_worker_select_dialog_checklist)

    if [ -n "$checklist" ]; then
        g_workersToDelete=$(dialog \
            --title 'Delete Worker' \
            --backtitle 'Lotus Worker Manager' \
            --ok-label 'Next' \
            --no-cancel \
            --no-tags \
            --checklist 'Select Workers' $HEIGHT $WIDTH 10 $checklist \
            3>&1 1>&2 2>&3 3>&-)
    else
        dialog --msgbox "No workers have been created yet." $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
        return $DIALOG_CANCEL
    fi
}

function delete_worker_confirm_dialog
{
    dialog --title 'Delete Worker' \
           --backtitle 'Lotus Worker Manager' \
           --yesno "Delete $g_workersToDelete?" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function create_worker_generalparams
{
    local state=$E_CREATE_QUIT
    create_worker_generalparams_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_CREATE_TYPE 
            ;;
    esac

    create_worker_generalparams_postprocessing
    return $state
}

function create_worker_type
{
    local state=$E_CREATE_QUIT
    create_worker_type_dialog
    
    case $? in
        $DIALOG_NEXT ) 	
            [ "$g_type" == "Seal" ] \
                && state=$E_CREATE_TASKS \
                || state=$E_CREATE_SUMMARY
            ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_GENERALPARAMS 
            ;;
    esac

    return $state
}

function create_worker_tasks
{
    local state=$E_CREATE_QUIT
    create_worker_tasks_dialog

    case $? in
        $DIALOG_NEXT ) 
            state=$E_CREATE_SUMMARY 
            ;;
        $DIALOG_BACK ) 
            state=$E_CREATE_TYPE 
            ;;
    esac

    return $state
}

function create_worker_summary_finish
{
    local wrepopath="$HOME/.lotusworkers/$g_name"
    mkdir -p $wrepopath/tmpdir

    declare exports
    
    exports+="export LOTUS_CUSTOM_PORT=$g_port\n"
    exports+="export TMPDIR=$wrepopath/tmpdir\n"
    exports+="export CUDA_VISIBLE_DEVICES=$g_gpus\n"
    exports+="export LOTUS_WORKER_PATH=$wrepopath\n"
    exports+="export FIL_PROOFS_USE_MULTICORE_SDR=$(is_flag_io SDR)\n"

    if [[ "$g_type" == "Seal" ]]; then
        exports+="export LOTUS_CUSTOM_ADDPIECE=$(is_task_tf AP)\n"
        exports+="export LOTUS_CUSTOM_PRECOMMIT1=$(is_task_tf PC1)\n"
        exports+="export LOTUS_CUSTOM_PRECOMMIT2=$(is_task_tf PC2)\n"
        exports+="export LOTUS_CUSTOM_COMMIT=$(is_task_tf C2)\n"
        exports+="export LOTUS_CUSTOM_UNSEAL=$(is_task_tf UNS)\n"
        exports+="export LOTUS_CUSTOM_REPLICA_UPDATE=$(is_task_tf RU)\n"
        exports+="export LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2=$(is_task_tf PR2)\n"
        exports+="export LOTUS_CUSTOM_REGEN_SECTOR_KEY=$(is_task_tf GSK)\n"
    else
        exports+="export LOTUS_CUSTOM_WINDOWPOST=$(is_type_tf WdPoSt)\n"
        exports+="export LOTUS_CUSTOM_WINNINGPOST=$(is_type_tf WinPoSt)\n"
    fi
    
    [ -n "$g_bellmanCustomGpu" ]    && exports+="export BELLMAN_CUSTOM_GPU='$g_bellmanCustomGpu'\n"
    [ -n "$g_cpuUtilization" ]      && exports+="export BELLMAN_CPU_UTILIZATION=$g_cpuUtilization\n"
    [ -n "$g_cpuGroup" ]            && exports+="export LOTUS_CUSTOM_CPUGROUP=$g_cpuGroup\n"

    echo -e "$exports" | tee $wrepopath/$g_name.env
    echo "$g_advancedCustom" >> $wrepopath/$g_name.env

    dialog --title 'Create Worker' \
           --backtitle 'Lotus Worker Manager' \
           --msgbox "Worker $g_name created!" $HEIGHT $WIDTH \
           3>&1 1>&2 2>&3 3>&-
}

function create_worker_advanced_parameters_postprocessing
{
    if [ -n "$g_advancedParams" ]; then
        readarray -t strarr <<< "$g_advancedParams"
        g_cpuUtilization=${strarr[0]}
        g_bellmanCustomGpu=${strarr[1]}
    fi
}

function create_worker_advanced_custom_postprocessing
{
    if [ -n "$g_advancedCustom" ]; then
        echo "$g_advancedCustom" > $g_advancedCustomTempFile
    fi
}

function create_worker_generalparams_postprocessing
{
    if [ -n "$g_generalParams" ]; then
        readarray -t strarr <<< "$g_generalParams"
        g_name=${strarr[0]}
        g_port=${strarr[1]}
        g_gpus=${strarr[2]}
        g_cpuGroup=${strarr[3]}
    fi
}

function create_worker_summary
{
    local state=$E_CREATE_QUIT
    create_worker_summary_dialog

    case $? in
        $DIALOG_FINISH ) 
            create_worker_summary_finish
            ;;
        $DIALOG_BACK ) 
            [ "$g_type" == "Seal" ] && \
                state=$E_CREATE_TASKS || state=$E_CREATE_TYPE  
            ;;
        $DIALOG_CANCEL ) 
            state=$E_CREATE_ADVANCED
            ;;
    esac

    return $state
}

function turn_worker_off
{
    local wreponame=$1
    local wrepopath="$HOME/.lotusworkers/$wreponame"

    if [ -f "$wrepopath/repo.lock" ]; then
        source $wrepopath/$wreponame.env
        pkill --signal SIGINT -u mainnet -f "lotus-worker run --listen=${LOTUS_CUSTOM_IP:=0.0.0.0}:${LOTUS_CUSTOM_PORT:=3400}"
    fi
}

function turn_worker_on
{
    local wreponame=$1
    local wrepopath="$HOME/.lotusworkers/$wreponame"

    if [ ! -f "$wrepopath/repo.lock" ]; then
        source $wrepopath/$wreponame.env
        [ -n "$LOTUS_CUSTOM_CPUGROUP" ] && cgexec_args="cgexec -g cpuset:${LOTUS_CUSTOM_CPUGROUP:=all} --sticky"

        nohup $cgexec_args lotus-worker run \
            --listen=${LOTUS_CUSTOM_IP:=0.0.0.0}:${LOTUS_CUSTOM_PORT:=3400} \
            --addpiece=${LOTUS_CUSTOM_ADDPIECE:=false} \
            --precommit1=${LOTUS_CUSTOM_PRECOMMIT1:=false} \
            --precommit2=${LOTUS_CUSTOM_PRECOMMIT2:=false} \
            --commit=${LOTUS_CUSTOM_COMMIT:=false} \
            --unseal=${LOTUS_CUSTOM_UNSEAL:=false} \
            --replica-update=${LOTUS_CUSTOM_REPLICA_UPDATE:=false} \
            --prove-replica-update2=${LOTUS_CUSTOM_PROVE_REPLICA_UPDATE2:=false} \
            --regen-sector-key=${LOTUS_CUSTOM_REGEN_SECTOR_KEY:=false} \
            --winningpost=${LOTUS_CUSTOM_WINNINGPOST:=false} \
            --windowpost=${LOTUS_CUSTOM_WINDOWPOST:=false} > $wrepopath/$wreponame.log 2>&1 &
    fi
}

function create_worker_advanced_parameters
{
    local state=$E_CREATE_ADVANCED_QUIT
    create_worker_advanced_parameters_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_CREATE_ADVANCED_CUSTOM
            ;;
    esac

    create_worker_advanced_parameters_postprocessing
    return $state
}

function create_worker_advanced_custom
{
    local state=$E_CREATE_ADVANCED_QUIT
    create_worker_advanced_custom_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_CREATE_ADVANCED_FLAGS
            ;;
        $DIALOG_BACK )
            state=$E_CREATE_ADVANCED_PARAMETERS
            ;;
    esac

    create_worker_advanced_custom_postprocessing
    return $state
}

function create_worker_advanced_flags
{
    local state=$E_CREATE_ADVANCED_QUIT
    create_worker_advanced_flags_dialog

    case $? in
        $DIALOG_BACK )
            state=$E_CREATE_ADVANCED_CUSTOM
            ;;
    esac

    return $state
}

function create_worker_advanced
{
    local state=$E_CREATE_ADVANCED_PARAMETERS
    while [[ $state -ne $E_CREATE_ADVANCED_QUIT ]]; do
        case $state in
            $E_CREATE_ADVANCED_PARAMETERS ) create_worker_advanced_parameters ;;
            $E_CREATE_ADVANCED_CUSTOM ) create_worker_advanced_custom ;;
            $E_CREATE_ADVANCED_FLAGS ) create_worker_advanced_flags ;;
        esac
        state=$?
    done

    return $E_CREATE_SUMMARY
}

function create_worker
{
    g_advancedCustomTempFile=$(mktemp /tmp/abc-XXXXX.tmp)
    echo "# Use this file to add your own custom environment variables" > $g_advancedCustomTempFile

    local state=$E_CREATE_GENERALPARAMS
    while [[ $state -ne $E_CREATE_QUIT ]]; do
        case $state in
            $E_CREATE_GENERALPARAMS ) create_worker_generalparams ;;
            $E_CREATE_TYPE ) create_worker_type ;;
            $E_CREATE_TASKS ) create_worker_tasks ;;
            $E_CREATE_SUMMARY ) create_worker_summary ;;
            $E_CREATE_ADVANCED ) create_worker_advanced ;;
        esac
        state=$?
    done

    rm $g_advancedCustomTempFile
}

function start_worker_select
{
    local state=$E_START_QUIT
    start_worker_select_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_START_CONFIRM
            if [ -z "$g_workersToStart" ]; then
                dialog --msgbox "Please select worker(s)" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
                state=$E_START_SELECT
            fi
            ;;
    esac

    return $state
}

function start_worker_confirm
{
    local state=$E_START_QUIT
    start_worker_confirm_dialog

    case $? in
        $DIALOG_YES )
            for w in $g_workersToStart; do turn_worker_on $w; done
            dialog --msgbox "$g_workersToStart started!" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
            ;;
    esac

    return $state
}

function start_worker
{
    local state=$E_START_SELECT
    while [[ $state -ne $E_START_QUIT ]]; do
        case $state in
            $E_START_SELECT ) start_worker_select ;;
            $E_START_CONFIRM ) start_worker_confirm ;;
        esac
        state=$?
    done
}

function stop_worker_select
{
    local state=$E_STOP_QUIT
    stop_worker_select_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_STOP_CONFIRM
            if [ -z "$g_workersToStop" ]; then
                dialog --msgbox "Please select worker(s)" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
                state=$E_STOP_SELECT
            fi
            ;;
    esac

    return $state
}

function stop_worker_confirm
{
    local state=$E_STOP_QUIT
    stop_worker_confirm_dialog

    case $? in
        $DIALOG_YES )
            for w in $g_workersToStop; do turn_worker_off $w; done
            dialog --msgbox "$g_workersToStop stopped!" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
            ;;
    esac

    return $state
}

function stop_worker
{
    local state=$E_STOP_SELECT
    while [[ $state -ne $E_STOP_QUIT ]]; do
        case $state in
            $E_STOP_SELECT ) stop_worker_select ;;
            $E_STOP_CONFIRM ) stop_worker_confirm ;;
        esac
        state=$?
    done
}

function delete_worker_select
{
    local state=$E_DELETE_QUIT
    delete_worker_select_dialog

    case $? in
        $DIALOG_NEXT )
            state=$E_DELETE_CONFIRM
            if [ -z "$g_workersToDelete" ]; then
                dialog --msgbox "Please select worker(s)" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
                state=$E_DELETE_SELECT
            fi
            ;;
    esac
    
    return $state
}

function delete_worker_confirm
{
    local state=$E_DELETE_QUIT
    delete_worker_confirm_dialog

    case $? in
        $DIALOG_YES )
            for w in $g_workersToDelete; do rm -R $HOME/.lotusworkers/$w; done
            dialog --msgbox "$g_workersToDelete deleted!" $HEIGHT $WIDTH 3>&1 1>&2 2>&3 3>&-
            ;;
    esac

    return $state
}

function delete_worker
{
    local state=$E_DELETE_SELECT
    while [[ $state -ne $E_DELETE_QUIT ]]; do
        case $state in
            $E_DELETE_SELECT ) delete_worker_select ;;
            $E_DELETE_CONFIRM ) delete_worker_confirm ;;
        esac
        state=$?
    done
}

function start_worker_select_dialog_checklist
{
    for wrepopath in $HOME/.lotusworkers/*; do
        if [ ! -f "$wrepopath/repo.lock" ]; then 
            local wreponame=$(basename $wrepopath)
            echo -n "$wreponame $wreponame off "
        fi
    done
}

function stop_worker_select_dialog_checklist
{
    for wrepopath in $HOME/.lotusworkers/*; do
        if [ -f "$wrepopath/repo.lock" ]; then 
            local wreponame=$(basename $wrepopath)
            echo -n "$wreponame $wreponame off "
        fi
    done
}

function delete_worker_select_dialog_checklist
{
    for wrepopath in $HOME/.lotusworkers/*; do
        local wreponame=$(basename $wrepopath)
        if [ -d "$wrepopath" ]; then 
            echo -n "$wreponame $wreponame off "
        fi
    done
}

while true; do
    selection=$(dialog \
        --title 'Main Menu' \
        --backtitle 'Lotus Worker Manager' \
        --cancel-label 'Quit' \
        --menu 'Please Select' $HEIGHT $WIDTH 4 \
        1 'Create Worker' \
        2 'Delete Worker' \
        3 'Start Worker' \
        4 'Stop Worker' \
        3>&1 1>&2 2>&3 3>&-)

    exit_status=$?
    case $exit_status in
        $DIALOG_QUIT | $DIALOG_ESC )
            clear; echo 'Lotus Worker Manager terminated.'
            exit ;;
    esac

    case $selection in
        1 ) create_worker ;;
        2 ) delete_worker ;;
        3 ) start_worker ;;
        4 ) stop_worker ;;
    esac
done
